-- Anti map exploit script by ClavusElite, modified by Deluvas for ZS
-- Note: SHITTY CODE DOWN .. (not my fault it's like that or if you burn your eyes)

MapExploits = MapExploits or {}

-- Screams of exploiter hell
local ExploitScreams = { 
	"vo/ravenholm/monk_death07.wav", 
	"vo/npc/male01/no01.wav", 
	"vo/npc/male01/gethellout.wav", 
	"vo/npc/male01/no02.wav",
	"vo/npc/Alyx/ohno_startle01.wav",
	"vo/npc/Alyx/ohno_startle03.wav",
}

function GM:SetExploitBoxes()
	
	local filename = "zombiesurvival/exploits/".. game.GetMap() ..".txt"
	
	if file.Exists(filename,"DATA") then
		local tbl = util.JSONToTable(file.Read(filename))
		
		for i,stuff in pairs(tbl) do
			table.insert( MapExploits, { origin = Vector(stuff.origin[1],stuff.origin[2],stuff.origin[3]), bsize = stuff.bsize } )
		end
		
		Debug("[MAPDATA] Loaded Anti-Exploit Boxes")
	end
end

function ConvertOldExploitsToNew(pl,cmd,args)
	
	if not pl:IsAdmin() then return end
	
	local TempMapExploits = table.Copy(MapExploits)
	
	for i, filename in ipairs(file.Find("zombiesurvival/gamemode/server/maps/exploits/*.lua","lsv")) do
	
		local tbl = {}
		
		-- print("Found file: "..filename)
		
		MapExploits = {}
		include( "zombiesurvival/gamemode/server/maps/exploits/"..filename ) 
		
		for i,v in pairs(MapExploits) do
			local minitbl = {origin = {v.origin.x,v.origin.y,v.origin.z}, bsize = v.bsize}
			table.insert(tbl,minitbl)
		end
		
		local output = string.gsub(filename,".lua",".txt")
		
		file.Write( "zombiesurvival/exploits/"..output,util.TableToJSON(tbl or {}) )
		
		
	end
	
	MapExploits = TempMapExploits
	
	pl:ChatPrint("All old exploit boxes were successfully converted!")
end
concommand.Add("zs_convertexploits",ConvertOldExploitsToNew)

function ImportExploitsFromClient(pl,cmd,args)
	
	if not pl:IsAdmin() then return end
	
	if not args then return end
	
	ImportExploitFile = ImportExploitFile or nil
	ImportExploitTable = ImportExploitTable or {}
	
	
	local name = args[1]
	local data = args[2]
	
	-- print("For map "..name)
	-- print("Received "..data)
	
	local fixed = string.gsub(data,"'","\"")
	
	local decoded = util.JSONToTable(fixed)
	
	ImportExploitFile = name
	table.insert(ImportExploitTable,decoded)
	

end
concommand.Add("zs_importexploits",ImportExploitsFromClient)

function ConfirmExploitsFromClient(pl,cmd,args)
	
	if not pl:IsAdmin() then return end
	
	if not ImportExploitFile then return end
	
	-- PrintTable(ImportCrateTable)
	
	file.Write( "zombiesurvival/exploits/"..ImportExploitFile..".txt",util.TableToJSON(ImportExploitTable or {}) )
	
	ImportExploitFile = nil
	ImportExploitTable = {}
	
	pl:ChatPrint("Successfully imported map file!")
	
end
concommand.Add("zs_importexploits_confirm",ConfirmExploitsFromClient)

function MapExploitWrite()
	local path = "zombiesurvival/exploits/"..game.GetMap()..".txt"-- "exploits/"..game.GetMap()..".txt"
	
	if #MapExploits <= 0 then 
		if file.Exists( path,"DATA" ) then
			file.Delete( path )
		end
		
		return 
	end
	
	local tbl = {}
	
	for k, v in pairs( MapExploits ) do
		local minitbl = {origin = {v.origin.x,v.origin.y,v.origin.z}, bsize = v.bsize}
		table.insert(tbl,minitbl)
	end
	
	-- PrintTable(tbl)
	
	file.Write( path, util.TableToJSON(tbl) )
end

--[=[function MapExploitWrite()
	local path = "exploits/"..game.GetMap()..".txt"
	
	if #MapExploits <= 0 then 
		if file.Exists( path ) then
			file.Delete( path )
		end
		
		return 
	end

	local contentstring = "--Generated automatically\n"
	contentstring = "MapExploits = MapExploits or {}\n"
	
	for k, v in pairs( MapExploits ) do
		contentstring = contentstring.."table.insert( MapExploits, { origin = Vector( "..v.origin.x..","..v.origin.y..","..v.origin.z.." ), bsize = "..v.bsize.."} )\n"
	end
	
	file.Write( path, contentstring )
end]=]

local ExploitT = 0
local function MapExploitThink()
	if #MapExploits <= 0 then return end

	local found = {}
	local vec = nil
	local sz = 0

	for index, pl in pairs ( team.GetPlayers( TEAM_HUMAN ) ) do
		for k, v in pairs( MapExploits ) do
			sz = v.bsize
			vec = Vector( sz,sz,sz ) 
				
			local Min = v.origin - vec
			local Max = v.origin + vec
		
			local Pos = pl:GetPos() + Vector( 0,0,3 )

			if Pos.x < Max.x and Pos.y < Max.y and Pos.z < Max.z and Pos.x > Min.x and Pos.y > Min.y and Pos.z > Min.z then
				if ( pl.ExploitTime or 0 ) < CurTime() and ( ( pl.ExploitBox or 0 ) <= 0 ) then
					pl.ExploitBox = k
					pl:SetDTInt( 3, pl.ExploitBox )
					
					pl.ExploitTime = CurTime() + 3
					pl:Message( "You are on a restricted area. Please go back, or die in great pains.", 2, "white" )
				end
					
					-- Slap him
					if ( pl.ExploitBox == k ) then
						if ( pl.ExploitSlap or 0 ) <= CurTime() then
							if ( pl:Health() > 10 ) then
								pl:TakeDamage ( math.random( 7,10 ) )
							end
								
							if math.random( 1, 2 ) == 1 then
								pl:EmitSound( table.Random( ExploitScreams ), 100, math.random( 90, 110 ) )
							end
							
							pl.ExploitSlap = CurTime() + 1.5
							pl:EmitSound ( "ambient/voices/citizen_punches2.wav" )
					
							pl:SetVelocity ( Vector( math.random( -10,10 ),math.random( -10,10 ),math.random( 2,4 ) ):GetNormal() * math.random( 300,500 ) )
						end
					end
				else
					local BoxNr = pl:GetDTInt( 3 )
					if ( ( pl.ExploitTime or 0 ) < CurTime() ) and ( pl.ExploitBox == k ) then
						pl.ExploitBox = 0
						pl:SetDTInt( 3, pl.ExploitBox )
						
						pl.ExploitTime = CurTime() + 2
					end
				end
			end
		end
		
		--ExploitT = CurTime() + 0.25
	--end	
end
--hook.Add( "Think", "MapExploitThink", MapExploitThink )
timer.Create("MapExploitThink", 5, 0, MapExploitThink)


